type UserRole = 
 variant {
   Establishment;
   HR;
   Worker;
 };
type UserProfile = 
 record {
   companyId: opt text;
   createdAt: int;
   isActive: bool;
   name: text;
   "principal": principal;
   role: UserRole;
 };
type Result_2 = 
 variant {
   err: text;
   ok: text;
 };
type Result_1 = 
 variant {
   err: text;
   ok: vec UserProfile;
 };
type Result = 
 variant {
   err: text;
   ok: UserProfile;
 };
type CreateProfileRequest = 
 record {
   companyId: opt text;
   name: text;
   role: UserRole;
 };
service : {
  belongsToCompany: (companyId: text) -> (bool) query;
  createProfile: (request: CreateProfileRequest) -> (Result);
  deactivateUser: (userPrincipal: principal) -> (Result_2);
  getProfile: () -> (Result) query;
  getSystemStats: () ->
   (record {
      activeUsers: nat;
      establishments: nat;
      hrUsers: nat;
      totalUsers: nat;
      workers: nat;
    }) query;
  getUsersByCompany: (companyId: text) -> (Result_1);
  hasRole: (role: UserRole) -> (bool) query;
  updateProfile: (name: text, companyId: opt text) -> (Result);
}
