type Result_1 = 
 variant {
   err: text;
   ok: BenefitProgram;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type PaymentFrequency = 
 variant {
   Biweekly;
   Monthly;
   Weekly;
 };
type BenefitType = 
 variant {
   Culture;
   Education;
   Food;
   Health;
   Transport;
 };
type BenefitProgram = 
 record {
   amountPerWorker: nat;
   benefitType: BenefitType;
   companyId: text;
   createdAt: int;
   createdBy: principal;
   frequency: PaymentFrequency;
   id: text;
   isActive: bool;
   name: text;
   paymentDay: nat;
 };
service : {
  assignWorkerToBenefit: (workerId: principal, programId: text, customAmount:
   opt nat) -> (Result);
  createBenefitProgram: (name: text, benefitType: BenefitType, companyId:
   text, amountPerWorker: nat, frequency: PaymentFrequency, paymentDay:
   nat) -> (Result_1);
  executeManualPayment: (programId: text) -> (Result);
  getBenefitProgram: (programId: text) -> (Result_1) query;
  getCompanyBenefitPrograms: (companyId: text) -> (vec BenefitProgram) query;
  getWorkerBenefits: (workerId: principal) -> (vec BenefitProgram) query;
  updateWorkerBenefitAmount: (workerId: principal, programId: text,
   newAmount: nat) -> (Result);
}
